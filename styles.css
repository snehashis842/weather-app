/* ===== CUSTOM PROPERTIES (CSS Variables) ===== */
/*
    These are like variables in programming, but for CSS!
    They allow you to define values (like colors, spacing, or border-radius) once
    and reuse them throughout your stylesheet. If you want to change a color
    across your entire app, you just change it in one place here.
*/
:root {
    /* Color Palette: Defines various gradients and solid colors for backgrounds, buttons, etc. */
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    /* Main background gradient */
    --secondary-gradient: linear-gradient(135deg, #ff6b6b, #ee5a24);
    /* Used for buttons, accents */
    --accent-gradient: linear-gradient(135deg, #4ecdc4, #44a08d);
    /* Another accent color */
    --warning-gradient: linear-gradient(135deg, #ffeaa7, #fdcb6e);
    /* For warnings or specific elements */

    /* Glass Effect Colors: These are crucial for the "glassmorphism" look. */
    --glass-bg: rgba(255, 255, 255, 0.1);
    /* Semi-transparent white for glass background */
    --glass-border: rgba(255, 255, 255, 0.2);
    /* Slightly more opaque white for glass borders */
    --glass-hover: rgba(255, 255, 255, 0.15);
    /* For hover states on glass elements */

    /* Text Colors: Defines text colors, mostly white/off-white for contrast against dark backgrounds. */
    --text-primary: white;
    --text-secondary: rgba(255, 255, 255, 0.9);
    --text-muted: rgba(255, 255, 255, 0.7);

    /* Spacing: Consistent spacing values for padding, margins, etc. */
    --spacing-xs: 5px;
    --spacing-sm: 10px;
    --spacing-md: 15px;
    --spacing-lg: 20px;
    --spacing-xl: 30px;
    --spacing-xxl: 40px;

    /* Border Radius: Consistent rounded corners. */
    --radius-sm: 10px;
    --radius-md: 15px;
    --radius-lg: 20px;
    --radius-xl: 25px;

    /* Shadows: Predefined shadow effects for depth. */
    --shadow-sm: 0 4px 8px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 8px 16px rgba(0, 0, 0, 0.15);
    --shadow-lg: 0 12px 24px rgba(0, 0, 0, 0.2);
    --shadow-glow: 0 8px 32px rgba(102, 126, 234, 0.3);
    /* A blueish glow effect */

    /* Transitions: Standardized transition durations for smooth animations. */
    --transition-fast: 0.2s ease;
    --transition-normal: 0.3s ease;
    --transition-slow: 0.5s ease;
}

/* ===== RESET & BASE STYLES ===== */
/*
    The universal selector '*' applies these styles to ALL elements.
    `margin: 0; padding: 0;` removes default browser spacing.
    `box-sizing: border-box;` is a best practice: it makes sure that padding
    and border are included in the element's total width and height,
    making layout calculations much more intuitive.
*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/*
    Styling for the entire body of the page.
    `font-family`: Sets the primary font (Inter, with fallbacks).
    `background`: Applies the primary gradient defined in custom properties.
    `background-attachment: fixed;`: Makes the background gradient stay in place when scrolling.
    `min-height: 100vh;`: Ensures the body takes at least the full height of the viewport.
    `color: var(--text-primary);`: Sets the default text color to white, using our variable.
        (Note: You had `color: #333;` initially, but given your `--text-primary` is white,
        I've updated this to use the variable for consistency with your glassmorphism theme.)
    `-webkit-font-smoothing` and `-moz-osx-font-smoothing`: Improve font rendering on different OS.
*/
body {
    font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: var(--primary-gradient);
    background-attachment: fixed;
    min-height: 100vh;
    color: var(--text-primary);
    /* Changed for consistency with glassmorphism theme */
    line-height: 1.6;
    /* Improves readability of text */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    display: flex;
    /* Added to center the container */
    justify-content: center;
    /* Added to center the container horizontally */
    align-items: center;
    /* Added to center the container vertically */
}

/*
    The main wrapper for your content.
    `max-width`: Limits the overall width for better readability on large screens.
    `margin: 0 auto;`: Centers the container horizontally.
    `padding`: Adds space around the content.
    `min-height: 100vh; display: flex; flex-direction: column;`: Makes the container
    take up full height and allows its children (header, main, footer) to stack vertically
    and distribute space (especially useful with `margin-top: auto` on the footer).
*/
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--spacing-lg);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    width: 100%;
    /* Ensure it takes full width within its parent's padding */
}

/* ===== HEADER STYLES ===== */
/*
    Styling for the top section of your app.
    `text-align: center;`: Centers text.
    `margin-bottom`: Adds space below the header.
    `background`, `backdrop-filter`, `border-radius`, `border`, `box-shadow`:
        These are the core properties for the glassmorphism effect. `backdrop-filter: blur()`
        is what creates the frosted glass look by blurring content behind the element.
    `position: relative; overflow: hidden;`: Needed for the `::before` pseudo-element animation.
*/
.header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
    background: var(--glass-bg);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    /* For Safari compatibility */
    border-radius: var(--radius-lg);
    padding: var(--spacing-xl);
    border: 1px solid var(--glass-border);
    box-shadow: var(--shadow-md);
    position: relative;
    overflow: hidden;
}

/*
    `::before` pseudo-element: Creates an animated "shimmer" effect over the header.
    It's an extra decorative layer that moves across the element.
    `animation: shimmer 6s ease-in-out infinite;`: Applies the shimmer animation.
*/
.header::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    animation: shimmer 6s ease-in-out infinite;
    pointer-events: none;
    /* Allows clicks to pass through this overlay */
}

/* Keyframe animation for the shimmer effect. */
@keyframes shimmer {

    0%,
    100% {
        transform: rotate(0deg);
    }

    50% {
        transform: rotate(180deg);
    }
}

/* Header text styling. `clamp()` is great for responsive font sizes. */
.header h1 {
    font-size: clamp(2rem, 4vw, 2.5rem);
    /* Responsive font size */
    color: var(--text-primary);
    margin-bottom: var(--spacing-sm);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    /* Adds depth to text */
    font-weight: 700;
    letter-spacing: -0.02em;
}

.header p {
    color: var(--text-secondary);
    font-size: clamp(1rem, 2vw, 1.1rem);
    font-weight: 400;
}

/* ===== SEARCH SECTION ===== */
.search-section {
    margin-bottom: var(--spacing-xl);
}

/* Uses Flexbox for horizontal arrangement of input and button. */
.search-container {
    display: flex;
    gap: var(--spacing-md);
    /* Space between input and button */
    max-width: 600px;
    margin: 0 auto;
    /* Centers the search bar */
    position: relative;
}

/* Styling for the city input field. */
.search-input {
    flex: 1;
    /* Allows the input to grow and fill available space */
    padding: var(--spacing-md) var(--spacing-lg);
    border: none;
    border-radius: var(--radius-xl);
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.95);
    /* Slightly opaque white background */
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.3);
    outline: none;
    /* Removes default focus outline */
    transition: all var(--transition-normal);
    /* Smooth transitions for hover/focus */
    box-shadow: var(--shadow-sm);
    font-family: inherit;
    /* Ensures font matches body */
    color: #333;
    /* Input text color */
}

/* Focus state for the input: subtle lift and glow. */
.search-input:focus {
    background: white;
    transform: translateY(-2px);
    box-shadow: var(--shadow-glow);
    border-color: rgba(102, 126, 234, 0.5);
}

.search-input::placeholder {
    color: #666;
    font-weight: 400;
}

/* Styling for the search button. */
.search-btn {
    padding: var(--spacing-md) var(--spacing-xl);
    background: var(--secondary-gradient);
    /* Uses a vibrant gradient */
    color: var(--text-primary);
    border: none;
    border-radius: var(--radius-xl);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all var(--transition-normal);
    white-space: nowrap;
    /* Prevents text from wrapping */
    box-shadow: var(--shadow-sm);
    position: relative;
    overflow: hidden;
    /* Important for the shimmer effect */
}

/* `::before` pseudo-element for a subtle shimmer effect on button hover. */
.search-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    /* Starts off-screen to the left */
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left var(--transition-slow);
}

/* On hover, the shimmer moves across the button. */
.search-btn:hover::before {
    left: 100%;
}

/* Button hover effects: subtle lift and a glowing shadow. */
.search-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(238, 90, 36, 0.4);
}

/* Button active state: returns to original position when clicked. */
.search-btn:active {
    transform: translateY(0);
}

/* ===== SUCCESS MESSAGE ===== */
/*
    This is a great addition for positive feedback, though not in your HTML yet.
    It uses a light green background with a blurred effect.
*/
.success-message {
    max-width: 600px;
    margin: var(--spacing-md) auto 0;
    padding: var(--spacing-md);
    background: rgba(76, 217, 100, 0.15);
    border: 1px solid rgba(76, 217, 100, 0.3);
    border-radius: var(--radius-sm);
    color: #4cd964;
    text-align: center;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
}

/* ===== ERROR MESSAGE ===== */
/*
    Styling for error messages.
    Uses a light red background with a blurred effect.
    `animation: shake 0.5s ease-in-out;`: Adds a subtle "shake" animation to draw attention.
*/
.error-message {
    max-width: 600px;
    margin: var(--spacing-md) auto 0;
    padding: var(--spacing-md);
    background: rgba(255, 107, 107, 0.15);
    border: 1px solid rgba(255, 107, 107, 0.3);
    border-radius: var(--radius-sm);
    color: #ff6b6b;
    text-align: center;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    animation: shake 0.5s ease-in-out;
}

/* Keyframe animation for the shake effect. */
@keyframes shake {

    0%,
    100% {
        transform: translateX(0);
    }

    25% {
        transform: translateX(-5px);
    }

    75% {
        transform: translateX(5px);
    }
}

/* ===== LOADING SPINNER ===== */
/*
    Styling for the loading indicator.
*/
.loading {
    text-align: center;
    padding: var(--spacing-xxl);
    color: var(--text-primary);
}

/* Styling for the circular spinner. */
.spinner {
    width: 50px;
    height: 50px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid var(--text-primary);
    /* Creates the spinning effect with a colored top border */
    border-radius: 50%;
    /* Makes it a perfect circle */
    animation: spin 1s linear infinite;
    /* Applies the spinning animation */
    margin: 0 auto var(--spacing-lg);
    /* Centers it and adds space below */
}

/* Keyframe animation for the spinning effect. */
@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

.loading p {
    font-size: 1.1rem;
    font-weight: 500;
}

/* ===== UTILITY CLASSES ===== */
/*
    These are general-purpose classes that can be applied to any element.
*/
.hidden {
    display: none !important;
    /* Hides an element completely */
}

/* Animations for fading in and sliding up elements. */
.fade-in {
    animation: fadeIn var(--transition-slow) ease-out;
}

.slide-up {
    animation: slideUp var(--transition-slow) ease-out;
}

/* ===== CURRENT WEATHER CARD ===== */
/*
    Styling for the main current weather display card.
    Applies glassmorphism, rounded corners, shadows, and an initial `fadeInUp` animation.
*/
.current-weather {
    background: var(--glass-bg);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border-radius: var(--radius-xl);
    padding: var(--spacing-xl);
    margin-bottom: var(--spacing-xl);
    border: 1px solid var(--glass-border);
    box-shadow: var(--shadow-lg);
    animation: fadeInUp 0.6s ease-out;
    /* Animation when it appears */
    position: relative;
    overflow: hidden;
}

/* `::before` pseudo-element for a subtle glowing border effect on hover. */
.current-weather::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    border-radius: var(--radius-xl);
    z-index: -1;
    /* Puts it behind the main content */
    opacity: 0;
    transition: opacity var(--transition-normal);
}

.current-weather:hover::before {
    opacity: 1;
    /* Fades in the glow on hover */
}

/* Header within the current weather card. */
.current-header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
}

.current-header h2 {
    font-size: clamp(1.5rem, 3vw, 2rem);
    color: var(--text-primary);
    margin-bottom: var(--spacing-xs);
    font-weight: 600;
    letter-spacing: -0.01em;
}

.current-header p {
    color: var(--text-muted);
    font-size: 1rem;
    font-weight: 400;
}

/* Layout for temperature and icon sections using CSS Grid. */
.current-main {
    display: grid;
    grid-template-columns: 1fr 1fr;
    /* Two equal columns */
    gap: var(--spacing-xl);
    margin-bottom: var(--spacing-xl);
    align-items: center;
    /* Vertically centers content in grid cells */
}

.temperature-section {
    text-align: center;
}

/* Special styling for the main temperature display. */
.temperature-section #temperature {
    font-size: clamp(3rem, 8vw, 4rem);
    font-weight: 300;
    color: var(--text-primary);
    display: block;
    margin-bottom: var(--spacing-sm);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    /* Creates a metallic/glossy text effect */
    background: linear-gradient(135deg, #fff, #f0f0f0);
    -webkit-background-clip: text;
    /* Clips background to text shape */
    -webkit-text-fill-color: transparent;
    /* Makes text transparent to show background */
    background-clip: text;
}

.temp-details p {
    color: var(--text-secondary);
    margin-bottom: var(--spacing-xs);
    font-size: 0.95rem;
    font-weight: 500;
}

.weather-icon-section {
    text-align: center;
}

/* Styling for the weather icon, including a drop shadow and hover animation. */
.weather-icon {
    width: 120px;
    height: 120px;
    margin-bottom: var(--spacing-sm);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));
    transition: transform var(--transition-normal);
}

.weather-icon:hover {
    transform: scale(1.05) rotate(5deg);
    /* Subtle grow and rotate on hover */
}

.weather-icon-section p {
    color: var(--text-primary);
    font-size: 1.2rem;
    font-weight: 500;
    text-transform: capitalize;
}

/* Layout for weather stats using CSS Grid. */
.weather-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    /* Responsive columns */
    gap: var(--spacing-lg);
}

/* Styling for individual stat cards. */
.stat {
    background: var(--glass-bg);
    padding: var(--spacing-md);
    border-radius: var(--radius-md);
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
}

/* `::before` pseudo-element for a shimmer effect on stat card hover. */
.stat::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left var(--transition-slow);
}

.stat:hover::before {
    left: 100%;
}

/* Stat card hover effects: subtle lift and background change. */
.stat:hover {
    transform: translateY(-2px);
    background: var(--glass-hover);
    box-shadow: var(--shadow-md);
}

.stat-label {
    display: block;
    color: var(--text-muted);
    font-size: 0.85rem;
    margin-bottom: var(--spacing-xs);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.stat-value {
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: 600;
}

/* ===== FORECAST SECTION ===== */
/*
    Styling for the 5-day forecast section.
    Similar glassmorphism effects and `fadeInUp` animation.
*/
.forecast-section {
    background: var(--glass-bg);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border-radius: var(--radius-xl);
    padding: var(--spacing-xl);
    border: 1px solid var(--glass-border);
    box-shadow: var(--shadow-lg);
    animation: fadeInUp 0.8s ease-out;
}

/* Forecast section header with a decorative underline. */
.forecast-section h3 {
    color: var(--text-primary);
    font-size: 1.5rem;
    margin-bottom: var(--spacing-lg);
    text-align: center;
    font-weight: 600;
    position: relative;
}

/* `::after` pseudo-element for the animated underline effect. */
.forecast-section h3::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 50px;
    height: 3px;
    background: var(--secondary-gradient);
    border-radius: 2px;
}

/* Layout for forecast cards using CSS Grid. */
.forecast-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    /* Responsive columns */
    gap: var(--spacing-md);
}

/* Styling for individual forecast cards. */
.forecast-card {
    background: var(--glass-bg);
    border-radius: var(--radius-md);
    padding: var(--spacing-lg);
    text-align: center;
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition: all var(--transition-normal);
    position: relative;
    overflow: hidden;
}

/* `::before` pseudo-element for a top border that expands on hover. */
.forecast-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--accent-gradient);
    transform: scaleX(0);
    /* Starts hidden */
    transform-origin: left;
    /* Expands from left */
    transition: transform var(--transition-normal);
}

.forecast-card:hover::before {
    transform: scaleX(1);
    /* Expands to full width on hover */
}

/* Forecast card hover effects: subtle lift and background change. */
.forecast-card:hover {
    transform: translateY(-5px);
    background: var(--glass-hover);
    box-shadow: var(--shadow-md);
}

.forecast-date {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin-bottom: var(--spacing-sm);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.forecast-icon {
    width: 60px;
    height: 60px;
    margin: var(--spacing-sm) 0;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
    transition: transform var(--transition-fast);
}

.forecast-card:hover .forecast-icon {
    transform: scale(1.1);
    /* Icon grows slightly on card hover */
}

.forecast-temp {
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
}

.forecast-desc {
    color: var(--text-secondary);
    font-size: 0.9rem;
    text-transform: capitalize;
    font-weight: 500;
}

/* ===== FOOTER ===== */
/* Styling for the footer, also with a glassmorphism effect. */
.footer {
    margin-top: auto;
    /* Pushes the footer to the bottom of the flex container */
    text-align: center;
    padding: var(--spacing-lg);
    color: var(--text-muted);
    font-size: 0.9rem;
    background: var(--glass-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--radius-sm);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

/* ===== ANIMATIONS ===== */
/*
    Keyframe animations for various effects.
    `fadeIn`: Makes an element gradually appear.
    `slideUp`: Makes an element slide up and fade in.
    `fadeInUp`: Similar to slideUp, but often used for elements appearing from below.
    `pulse`: Makes an element subtly grow and shrink.
    `float`: Makes an element gently move up and down.
*/
@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes pulse {

    0%,
    100% {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }
}

@keyframes float {

    0%,
    100% {
        transform: translateY(0px);
    }

    50% {
        transform: translateY(-10px);
    }
}

/* ===== THEME VARIANTS ===== */
/*
    These classes allow you to easily change the overall look of the app
    by overriding the custom properties. You could add these classes to the `body`
    or `container` element with JavaScript to switch themes.
*/
.theme-dark {
    --primary-gradient: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
    --glass-bg: rgba(0, 0, 0, 0.2);
    --glass-border: rgba(255, 255, 255, 0.1);
    --glass-hover: rgba(255, 255, 255, 0.1);
}

.theme-warm {
    --primary-gradient: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
    --secondary-gradient: linear-gradient(135deg, #667eea, #764ba2);
}

.theme-cool {
    --primary-gradient: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
    --secondary-gradient: linear-gradient(135deg, #667eea, #764ba2);
}

/* ===== SPECIAL EFFECTS ===== */
/*
    Classes to apply specific animations.
*/
.weather-card-glow {
    animation: pulse 2s infinite;
}

.floating-icon {
    animation: float 3s ease-in-out infinite;
}

/* ===== RESPONSIVE DESIGN ===== */
/*
    Media queries adjust styles for different screen sizes.
    `@media (max-width: 768px)`: Styles for screens up to 768px wide (e.g., tablets in portrait).
    `@media (max-width: 480px)`: Styles for screens up to 480px wide (e.g., mobile phones).
    These adjust spacing, font sizes, and grid layouts to ensure a good experience on smaller devices.
    For example, the search input and button stack vertically on small screens.
*/
@media (max-width: 768px) {
    :root {
        --spacing-lg: 15px;
        --spacing-xl: 25px;
        --spacing-xxl: 35px;
    }

    .container {
        padding: var(--spacing-md);
    }

    .header {
        padding: var(--spacing-lg);
    }

    .header h1 {
        font-size: clamp(1.8rem, 5vw, 2.2rem);
    }

    .search-container {
        flex-direction: column;
        /* Stacks input and button vertically */
        gap: var(--spacing-sm);
    }

    .search-btn {
        padding: var(--spacing-sm) var(--spacing-lg);
    }

    .current-main {
        grid-template-columns: 1fr;
        /* Single column for temp and icon */
        gap: var(--spacing-lg);
    }

    .temperature-section #temperature {
        font-size: clamp(2.5rem, 12vw, 3.5rem);
    }

    .weather-icon {
        width: 100px;
        height: 100px;
    }

    .weather-stats {
        grid-template-columns: repeat(2, 1fr);
        /* Two columns for stats */
        gap: var(--spacing-md);
    }

    .forecast-container {
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: var(--spacing-sm);
    }

    .forecast-card {
        padding: var(--spacing-md);
    }

    .forecast-icon {
        width: 50px;
        height: 50px;
    }
}

@media (max-width: 480px) {
    :root {
        --spacing-md: 12px;
        --spacing-lg: 16px;
        --spacing-xl: 20px;
    }

    .header {
        padding: var(--spacing-lg);
    }

    .header h1 {
        font-size: clamp(1.5rem, 6vw, 2rem);
    }

    .current-weather,
    .forecast-section {
        padding: var(--spacing-lg);
    }

    .temperature-section #temperature {
        font-size: clamp(2rem, 10vw, 2.8rem);
    }

    .weather-icon {
        width: 80px;
        height: 80px;
    }

    .weather-stats {
        grid-template-columns: 1fr;
        /* Single column for stats on very small screens */
        gap: var(--spacing-sm);
    }

    .forecast-container {
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    }

    .stat {
        padding: var(--spacing-sm);
    }

    .forecast-card {
        padding: var(--spacing-sm);
    }

    .forecast-icon {
        width: 40px;
        height: 40px;
    }
}

/* ===== ACCESSIBILITY IMPROVEMENTS ===== */
/*
    `@media (prefers-reduced-motion: reduce)`: This is excellent for accessibility!
    It detects if a user has a system setting to prefer less motion and disables
    most animations, preventing potential discomfort or motion sickness.
*/
@media (prefers-reduced-motion: reduce) {

    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        /* Virtually disables animations */
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/*
    Focus styles for keyboard navigation: Ensures that elements are clearly
    highlighted when tabbed to, which is vital for users who don't use a mouse.
*/
.search-input:focus,
.search-btn:focus {
    outline: 2px solid rgba(255, 255, 255, 0.8);
    outline-offset: 2px;
}

/*
    `@media (prefers-contrast: high)`: Another great accessibility feature.
    It adjusts colors to provide higher contrast if the user has a system setting
    for high contrast mode, making the content easier to read.
*/
@media (prefers-contrast: high) {
    :root {
        --glass-bg: rgba(0, 0, 0, 0.8);
        --glass-border: rgba(255, 255, 255, 0.8);
        --text-primary: #ffffff;
        --text-secondary: #f0f0f0;
        --text-muted: #d0d0d0;
    }
}

/* ===== PRINT STYLES ===== */
/*
    `@media print`: These styles are applied only when the page is printed.
    They ensure that the printed version is clean and readable, removing
    unnecessary elements like search bars, loading spinners, and complex backgrounds.
*/
@media print {
    body {
        background: white !important;
        color: black !important;
    }

    .header,
    .current-weather,
    .forecast-section {
        background: white !important;
        border: 1px solid #ccc !important;
        box-shadow: none !important;
    }

    .search-section,
    .loading,
    .error-message,
    .footer {
        display: none !important;
    }
}